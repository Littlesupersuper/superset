针对 S3Service 进行单元测试，可以使用 JUnit 5 和 Mockito 进行依赖注入和方法模拟。

1. 添加测试依赖

在 pom.xml 中加入 JUnit 5 和 Mockito 依赖：

<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <scope>test</scope>
</dependency>

<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <scope>test</scope>
</dependency>

<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <scope>test</scope>
</dependency>

2. 测试 listFiles 方法
	•	使用 Mockito 模拟 AmazonS3 的 listObjects 方法
	•	模拟返回多个 S3 文件对象

S3ServiceTest.java

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class S3ServiceTest {

    @Mock
    private AmazonS3 amazonS3;

    private S3Service s3Service;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        s3Service = new S3Service(amazonS3);
    }

    @Test
    void testListFiles() {
        // 模拟 S3 返回文件列表
        ObjectListing mockListing = mock(ObjectListing.class);
        S3ObjectSummary file1 = new S3ObjectSummary();
        file1.setKey("folder/file1.txt");

        S3ObjectSummary file2 = new S3ObjectSummary();
        file2.setKey("folder/file2.txt");

        when(amazonS3.listObjects("test-bucket", "folder/")).thenReturn(mockListing);
        when(mockListing.getObjectSummaries()).thenReturn(List.of(file1, file2));

        // 调用方法
        List<String> files = s3Service.listFiles("test-bucket", "folder/");

        // 断言结果
        assertEquals(2, files.size());
        assertEquals("folder/file1.txt", files.get(0));
        assertEquals("folder/file2.txt", files.get(1));

        // 验证方法被调用
        verify(amazonS3, times(1)).listObjects("test-bucket", "folder/");
    }
}

3. 测试 readFile 方法
	•	使用 Mockito 模拟 getObject 方法
	•	模拟返回一个 InputStream
	•	验证是否正确读取字节数据

代码：

import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.mockito.Mockito.*;

class S3ServiceReadFileTest {

    @Test
    void testReadFile() throws IOException {
        // 模拟 AmazonS3
        AmazonS3 mockS3 = mock(AmazonS3.class);
        S3Service s3Service = new S3Service(mockS3);

        // 模拟 S3Object 返回的 InputStream
        String fileContent = "Hello, S3!";
        InputStream inputStream = new ByteArrayInputStream(fileContent.getBytes());
        S3Object s3Object = mock(S3Object.class);
        S3ObjectInputStream s3ObjectInputStream = new S3ObjectInputStream(inputStream, null);

        when(mockS3.getObject("test-bucket", "folder/test.txt")).thenReturn(s3Object);
        when(s3Object.getObjectContent()).thenReturn(s3ObjectInputStream);

        // 执行方法
        byte[] result = s3Service.readFile("test-bucket", "folder/test.txt");

        // 断言结果
        assertArrayEquals(fileContent.getBytes(), result);

        // 验证 getObject 方法是否被调用
        verify(mockS3, times(1)).getObject("test-bucket", "folder/test.txt");
    }
}

4. 运行测试

如果你使用 Maven 作为构建工具，可以运行：

mvn test

或者如果使用 IDEA，可以直接运行 S3ServiceTest.java。

5. 总结

✅ 测试 listFiles 方法：
	•	通过 Mockito 模拟 S3 返回的 ObjectListing
	•	断言文件列表是否正确

✅ 测试 readFile 方法：
	•	通过 Mockito 模拟 getObject
	•	断言返回的字节数组内容

这样就完成了 S3Service 的单元测试，确保核心逻辑可以正常运行！