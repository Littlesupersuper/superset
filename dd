在Spring Boot中，可以通过AWS SDK与Amazon S3交互，从指定目录下获取文件名并将文件读取为字节流。以下是详细的实现步骤和代码示例：

1. 添加依赖

在你的pom.xml中添加AWS SDK的依赖：

<dependency>
    <groupId>software.amazon.awssdk</groupId>
    <artifactId>s3</artifactId>
    <version>2.20.50</version>
</dependency>

2. 配置AWS客户端

配置一个S3Client实例，建议使用依赖注入：

import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AwsS3Config {

    @Bean
    public S3Client s3Client() {
        return S3Client.builder()
                .region(software.amazon.awssdk.regions.Region.YOUR_REGION) // 替换为你的Region
                .build();
    }
}

3. 读取指定目录下的文件名

通过listObjectsV2方法列举指定目录下的文件：

import org.springframework.stereotype.Service;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;
import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;
import software.amazon.awssdk.services.s3.model.S3Object;

import java.util.ArrayList;
import java.util.List;

@Service
public class S3Service {

    private final S3Client s3Client;

    public S3Service(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    public List<String> listFiles(String bucketName, String prefix) {
        List<String> fileNames = new ArrayList<>();

        ListObjectsV2Request request = ListObjectsV2Request.builder()
                .bucket(bucketName)
                .prefix(prefix) // 指定目录前缀
                .build();

        ListObjectsV2Response result = s3Client.listObjectsV2(request);

        for (S3Object s3Object : result.contents()) {
            fileNames.add(s3Object.key());
        }

        return fileNames;
    }
}

4. 读取指定文件为字节流

通过getObject方法读取文件并将其转为字节流：

import software.amazon.awssdk.core.ResponseBytes;
import software.amazon.awssdk.services.s3.model.GetObjectRequest;
import software.amazon.awssdk.services.s3.model.GetObjectResponse;

@Service
public class S3Service {

    private final S3Client s3Client;

    public S3Service(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    // 获取文件内容为字节流
    public byte[] readFile(String bucketName, String key) {
        GetObjectRequest request = GetObjectRequest.builder()
                .bucket(bucketName)
                .key(key)
                .build();

        ResponseBytes<GetObjectResponse> objectBytes = s3Client.getObjectAsBytes(request);

        return objectBytes.asByteArray();
    }
}

5. 示例调用

在控制器或其他服务中调用：

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class S3Controller {

    private final S3Service s3Service;

    public S3Controller(S3Service s3Service) {
        this.s3Service = s3Service;
    }

    @GetMapping("/list-files")
    public List<String> listFiles(@RequestParam String bucketName, @RequestParam String prefix) {
        return s3Service.listFiles(bucketName, prefix);
    }

    @GetMapping("/read-file")
    public byte[] readFile(@RequestParam String bucketName, @RequestParam String key) {
        return s3Service.readFile(bucketName, key);
    }
}

6. 注意事项
	•	权限：确保S3的访问密钥和策略授予了所需权限（例如ListBucket和GetObject）。
	•	Region设置：将YOUR_REGION替换为实际使用的区域。
	•	错误处理：添加异常处理逻辑以捕获网络问题或权限错误。

这样，你可以通过REST API访问S3上的文件列表并读取文件为字节流。