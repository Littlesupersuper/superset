aws-java-sdk-bundle 是一个打包版本的 AWS SDK，它包含了所有 AWS 服务的依赖和模块，适合对依赖版本要求不敏感的小型项目。以下是如何使用它的步骤和示例：

1. 添加依赖

在 pom.xml 中引入 aws-java-sdk-bundle 的依赖：

<dependency>
    <groupId>com.amazonaws</groupId>
    <artifactId>aws-java-sdk-bundle</artifactId>
    <version>1.12.569</version> <!-- 确保使用最新版本 -->
</dependency>

2. 配置 AmazonS3 客户端

使用 AmazonS3Client 配置 S3 客户端：

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;

public class S3Config {

    public AmazonS3 s3Client(String accessKey, String secretKey, String region) {
        BasicAWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);
        return AmazonS3ClientBuilder.standard()
                .withRegion(region)
                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                .build();
    }
}

3. 列出指定目录下的文件

使用 S3 客户端的 listObjects 方法获取指定目录的文件列表：

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.S3ObjectSummary;

import java.util.ArrayList;
import java.util.List;

public class S3Service {

    private final AmazonS3 s3Client;

    public S3Service(AmazonS3 s3Client) {
        this.s3Client = s3Client;
    }

    public List<String> listFiles(String bucketName, String prefix) {
        List<String> fileNames = new ArrayList<>();

        ObjectListing objectListing = s3Client.listObjects(bucketName, prefix);
        for (S3ObjectSummary summary : objectListing.getObjectSummaries()) {
            fileNames.add(summary.getKey());
        }

        return fileNames;
    }
}

4. 读取指定文件为字节流

使用 getObject 方法读取文件内容并转为字节流：

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.S3Object;

import java.io.IOException;
import java.io.InputStream;

public class S3Service {

    private final AmazonS3 s3Client;

    public S3Service(AmazonS3 s3Client) {
        this.s3Client = s3Client;
    }

    public byte[] readFile(String bucketName, String key) throws IOException {
        S3Object s3Object = s3Client.getObject(bucketName, key);
        InputStream inputStream = s3Object.getObjectContent();

        return inputStream.readAllBytes();
    }
}

5. 示例调用

可以通过以下代码实例化服务并调用方法：

public class Main {
    public static void main(String[] args) throws IOException {
        String accessKey = "your-access-key";
        String secretKey = "your-secret-key";
        String region = "your-region";

        S3Config config = new S3Config();
        AmazonS3 s3Client = config.s3Client(accessKey, secretKey, region);

        S3Service service = new S3Service(s3Client);

        // 列出文件
        List<String> files = service.listFiles("your-bucket-name", "your-directory-prefix/");
        files.forEach(System.out::println);

        // 读取文件
        byte[] fileContent = service.readFile("your-bucket-name", "your-file-key");
        System.out.println(new String(fileContent));
    }
}

6. 注意事项
	•	凭证管理：避免在代码中硬编码访问密钥，建议使用 AWS 的环境变量、配置文件或 IAM 角色。
	•	权限：确保 AWS S3 存储桶和文件的权限正确设置。
	•	适用性：aws-java-sdk-bundle 包含了完整的 AWS SDK，包体积较大，仅适合对体积不敏感的小型项目。

如果项目较大或需要更精细的依赖管理，建议直接使用模块化版本的 AWS SDK，例如 software.amazon.awssdk:s3。