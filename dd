import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.jdbc.core.JdbcTemplate;
import reactor.core.publisher.Flux;
import reactor.test.StepVerifier;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Stream;

import static org.mockito.Mockito.*;

class ReactiveStreamQueryExampleTest {

    private JdbcTemplate jdbcTemplate;
    private ReactiveStreamQueryExample example;

    @BeforeEach
    void setUp() {
        jdbcTemplate = mock(JdbcTemplate.class); // 使用 Mockito 模拟 JdbcTemplate
        example = new ReactiveStreamQueryExample(jdbcTemplate);
    }

    @Test
    void queryForJsonFlux_ShouldReturnCorrectJsonStrings() {
        // 模拟数据库查询返回的 Stream
        Stream<Map<String, Object>> mockStream = Stream.of(
                Map.of("id", 1, "name", "Alice", "age", 25),
                Map.of("id", 2, "name", "Bob", "age", 30)
        );

        // 模拟 JdbcTemplate 的 queryForStream 方法行为
        when(jdbcTemplate.queryForStream(anyString(), any())).thenAnswer(invocation -> 
            mockStream.map(row -> {
                try {
                    return new ObjectMapper().writeValueAsString(row); // 将 Map 转换为 JSON
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            })
        );

        // 测试 Flux 的结果
        String sql = "SELECT * FROM test_table";
        Flux<String> resultFlux = example.queryForJsonFlux(sql);

        // 使用 StepVerifier 验证结果
        StepVerifier.create(resultFlux)
                .expectNext("{\"id\":1,\"name\":\"Alice\",\"age\":25}")
                .expectNext("{\"id\":2,\"name\":\"Bob\",\"age\":30}")
                .verifyComplete();

        // 验证 JdbcTemplate 的方法调用
        verify(jdbcTemplate, times(1)).queryForStream(sql, example.rowMapper());
    }

    @Test
    void queryForJsonFlux_ShouldHandleEmptyStream() {
        // 模拟空的 Stream
        Stream<Map<String, Object>> emptyStream = Stream.empty();

        when(jdbcTemplate.queryForStream(anyString(), any())).thenReturn(emptyStream);

        // 测试 Flux 的结果
        String sql = "SELECT * FROM empty_table";
        Flux<String> resultFlux = example.queryForJsonFlux(sql);

        // 使用 StepVerifier 验证 Flux 返回结果为空
        StepVerifier.create(resultFlux)
                .verifyComplete();

        // 验证 JdbcTemplate 的方法调用
        verify(jdbcTemplate, times(1)).queryForStream(sql, example.rowMapper());
    }

    @Test
    void queryForJsonFlux_ShouldHandleExceptionInMapping() {
        // 模拟有异常的 Stream
        Stream<Map<String, Object>> mockStream = Stream.of(
                Map.of("id", 1, "name", "Alice", "age", 25),
                Map.of("id", 2, "name", "Bob", "age", 30)
        );

        // 模拟 JdbcTemplate 返回的 Stream，手动引入异常
        when(jdbcTemplate.queryForStream(anyString(), any())).thenAnswer(invocation -> 
            mockStream.map(row -> {
                throw new RuntimeException("Simulated exception");
            })
        );

        // 测试 Flux 的结果
        String sql = "SELECT * FROM error_table";
        Flux<String> resultFlux = example.queryForJsonFlux(sql);

        // 使用 StepVerifier 验证 Flux 捕获异常
        StepVerifier.create(resultFlux)
                .expectErrorMatches(throwable -> throwable instanceof RuntimeException
                        && throwable.getMessage().equals("Simulated exception"))
                .verify();

        // 验证 JdbcTemplate 的方法调用
        verify(jdbcTemplate, times(1)).queryForStream(sql, example.rowMapper());
    }
}