在 Spring Boot 中，允许跨域访问（CORS，Cross-Origin Resource Sharing）可以通过以下几种方式进行配置：

1. 使用 @CrossOrigin 注解（局部配置）

可以在具体的控制器或方法上添加 @CrossOrigin 注解来允许跨域：

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MyController {

    @CrossOrigin(origins = "http://example.com") // 允许来自 http://example.com 的跨域请求
    @GetMapping("/api/data")
    public String getData() {
        return "Hello, CORS!";
    }
}

如果希望允许所有来源的跨域请求，可以使用 *：

@CrossOrigin(origins = "*")
@GetMapping("/api/data")
public String getData() {
    return "Hello, CORS!";
}

2. 全局配置 CORS

如果需要对整个应用的所有接口统一配置跨域规则，可以使用 WebMvcConfigurer 进行全局配置：

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**") // 匹配所有路径
                .allowedOrigins("http://example.com") // 允许的来源
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS") // 允许的 HTTP 方法
                .allowedHeaders("*") // 允许的请求头
                .allowCredentials(true) // 是否允许发送 Cookie
                .maxAge(3600); // 设置预检请求的缓存时间（秒）
    }
}

3. 在 Spring Security 中配置 CORS

如果你的项目使用了 Spring Security，需要在安全配置中明确允许 CORS：

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.cors() // 启用 CORS
            .and()
            .csrf().disable() // 根据需要禁用 CSRF
            .authorizeRequests()
            .anyRequest().permitAll(); // 配置其他安全规则

        return http.build();
    }
}

同时，确保定义了一个全局的 CorsConfigurationSource：

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

@Configuration
public class CorsConfig {

    @Bean
    public CorsFilter corsFilter() {
        CorsConfiguration config = new CorsConfiguration();
        config.addAllowedOrigin("http://example.com"); // 允许的来源
        config.addAllowedHeader("*"); // 允许的请求头
        config.addAllowedMethod("*"); // 允许的 HTTP 方法
        config.setAllowCredentials(true); // 是否允许发送 Cookie

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config); // 匹配所有路径

        return new CorsFilter(source);
    }
}

4. 使用 Spring Boot 配置文件

在某些情况下，也可以通过配置文件进行跨域设置，但功能有限：

在 application.properties 中：

# 允许跨域的路径
spring.web.cors.allowed-paths=/**
# 允许的来源
spring.web.cors.allowed-origins=http://example.com
# 允许的 HTTP 方法
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
# 允许的请求头
spring.web.cors.allowed-headers=*
# 是否允许发送 Cookie
spring.web.cors.allow-credentials=true

总结
	•	如果只需要对某些接口允许跨域，可以使用 @CrossOrigin 注解。
	•	如果需要全局配置跨域，使用 WebMvcConfigurer 或 CorsFilter。
	•	如果启用了 Spring Security，需要在安全配置中显式允许 CORS。