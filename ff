在 Spring Boot WebFlux 中，对请求体（Request Body）进行参数校验可以通过以下方式实现，涵盖基础校验、自定义校验和全局异常处理：

---

### 一、基础校验（使用 Hibernate Validator）

#### 1. 添加依赖
```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-validation</artifactId>
</dependency>
```

#### 2. 定义 DTO 对象
```java
public record UserRequest(
    @NotBlank(message = "用户名不能为空")
    @Size(min = 3, max = 20, message = "用户名长度需在3-20字符之间")
    String username,

    @Email(message = "邮箱格式不正确")
    String email,

    @Min(value = 18, message = "年龄必须大于18岁")
    @Max(value = 100, message = "年龄不能超过100岁")
    Integer age,

    @Pattern(regexp = "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$", 
             message = "密码必须包含字母和数字，且至少8位")
    String password
) {}
```

#### 3. 在 Controller 中进行校验
```java
@PostMapping("/users")
public Mono<ResponseEntity<User>> createUser(
    @Valid @RequestBody Mono<UserRequest> userRequest
) {
    return userRequest
        .flatMap(request -> userService.createUser(request))
        .map(user -> ResponseEntity.created(URI.create("/users/" + user.getId())).body(user));
}
```

---

### 二、自定义校验

#### 1. 创建自定义注解
```java
@Target({FIELD, PARAMETER})
@Retention(RUNTIME)
@Constraint(validatedBy = PhoneNumberValidator.class)
public @interface ValidPhoneNumber {
    String message() default "手机号格式不正确";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
}
```

#### 2. 实现校验逻辑
```java
public class PhoneNumberValidator implements ConstraintValidator<ValidPhoneNumber, String> {
    private static final Pattern PHONE_PATTERN = 
        Pattern.compile("^1[3-9]\\d{9}$");

    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        if (value == null) return true; // 允许空值（配合@NotBlank使用）
        return PHONE_PATTERN.matcher(value).matches();
    }
}
```

#### 3. 在 DTO 中使用
```java
public record UserRequest(
    // ...
    @ValidPhoneNumber
    String phone
) {}
```

---

### 三、全局异常处理

#### 1. 处理校验异常
```java
@ControllerAdvice
public class ValidationExceptionHandler {

    @ExceptionHandler(WebExchangeBindException.class)
    public Mono<ResponseEntity<ErrorResponse>> handleValidationException(
        WebExchangeBindException ex
    ) {
        return Mono.just(ex)
            .map(e -> new ErrorResponse(
                "VALIDATION_FAILED",
                "参数校验失败",
                e.getBindingResult().getFieldErrors().stream()
                    .map(fe -> new FieldError(
                        fe.getField(),
                        fe.getDefaultMessage()))
                    .toList()
            ))
            .map(body -> ResponseEntity.badRequest().body(body));
    }
}
```

#### 2. 统一错误响应格式
```java
public record ErrorResponse(
    String code,
    String message,
    List<FieldError> errors
) {
    public record FieldError(String field, String message) {}
}
```

---

### 四、响应式函数式端点校验

对于使用 RouterFunctions 的场景：

```java
@Configuration
public class UserRouter {

    @Bean
    public RouterFunction<ServerResponse> userRoutes(UserHandler userHandler) {
        return RouterFunctions.route()
            .POST("/users", 
                request -> request.bodyToMono(UserRequest.class)
                    .doOnNext(this::validate) // 手动校验
                    .flatMap(userHandler::createUser))
            .build();
    }

    private void validate(UserRequest request) {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Set<ConstraintViolation<UserRequest>> violations = 
            factory.getValidator().validate(request);
        
        if (!violations.isEmpty()) {
            throw new WebExchangeBindException(
                null, 
                new BindException(new Object(), "userRequest")
            );
        }
    }
}
```

---

### 五、高级校验场景

#### 1. 跨字段校验
```java
@Getter
@Setter
public class RegistrationRequest {

    @NotBlank
    private String password;

    @NotBlank
    private String confirmPassword;

    @AssertTrue(message = "两次密码输入不一致")
    public boolean isPasswordMatch() {
        return password != null && password.equals(confirmPassword);
    }
}
```

#### 2. 条件校验
```java
public class UserRequestValidator implements Validator {

    @Override
    public boolean supports(Class<?> clazz) {
        return UserRequest.class.isAssignableFrom(clazz);
    }

    @Override
    public void validate(Object target, Errors errors) {
        UserRequest request = (UserRequest) target;
        
        if ("admin".equalsIgnoreCase(request.username())) {
            if (!request.email().endsWith("@company.com")) {
                errors.rejectValue("email", 
                    "invalid.admin.email", 
                    "管理员必须使用公司邮箱");
            }
        }
    }
}
```

---

### 六、测试验证

#### 1. 单元测试
```java
@WebFluxTest
@Import({UserHandler.class, ValidationConfig.class})
class UserValidationTest {

    @Autowired
    private WebTestClient webTestClient;

    @Test
    void shouldRejectInvalidEmail() {
        UserRequest request = new UserRequest(
            "test", 
            "invalid-email", 
            20, 
            "Password123",
            "13800138000"
        );

        webTestClient.post()
            .uri("/users")
            .bodyValue(request)
            .exchange()
            .expectStatus().isBadRequest()
            .expectBody()
            .jsonPath("$.errors[0].field").isEqualTo("email");
    }
}
```

#### 2. 校验规则测试
```java
class UserRequestValidationTest {

    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();

    @Test
    void shouldValidatePhoneNumber() {
        UserRequest request = new UserRequest(
            "user",
            "test@example.com",
            25,
            "Password123",
            "12345678901" // 无效号码
        );

        Set<ConstraintViolation<UserRequest>> violations = validator.validate(request);
        assertThat(violations)
            .extracting("message")
            .contains("手机号格式不正确");
    }
}
```

---

### 七、配置优化

#### 1. 自定义校验消息
在 `src/main/resources/messages.properties` 中：
```properties
NotBlank.userRequest.username=用户名必须填写
Size.userRequest.username=用户名长度必须在{min}到{max}个字符之间
```

#### 2. 配置快速失败模式
```java
@Configuration
public class ValidationConfig {

    @Bean
    public Validator validator() {
        return Validation.byProvider(HibernateValidator.class)
            .configure()
            .failFast(true) // 发现第一个错误即返回
            .buildValidatorFactory()
            .getValidator();
    }
}
```

---

### 关键点总结：
1. **分层校验**：使用标准注解 + 自定义校验逻辑
2. **全局处理**：统一处理 `WebExchangeBindException`
3. **响应式兼容**：确保校验过程不阻塞响应式流
4. **明确提示**：提供用户友好的错误消息
5. **防御性编程**：对关键字段进行严格限制
6. **测试覆盖**：验证所有校验规则的有效性

这种设计可以确保：
- 非法参数被及时拦截
- 返回标准化的错误格式
- 保持非阻塞的响应式特性
- 校验规则易于维护和扩展
- 错误提示信息友好且安全（生产环境隐藏技术细节）